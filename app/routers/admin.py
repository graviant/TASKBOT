from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from ..middlewares.admin import AdminMiddleware
from ..db import repo

router = Router(name="admin")


@router.message(F.chat.type == "private", F.text == "üöÆ –£–¥–∞–ª–∏—Ç—å –ª—é–±–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def admin_delete_prompt(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤–∏–¥–∞: del &lt;assignment_id&gt;")


@router.message(F.chat.type == "private", F.text.regexp(r"^del\s+\d+$"))
async def admin_delete_do(message: Message):
    assignment_id = int(message.text.split()[1])
    ok = await repo.admin_delete_assignment(assignment_id)
    await message.answer("–£–¥–∞–ª–µ–Ω–æ ‚úÖ" if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ / —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ.")


@router.message(F.chat.type == "private", F.text == "üì¶ –í—ã–≥—Ä—É–∑–∏—Ç—å –ë–î")
async def export_db(message: Message):
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ pg_dump –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ë–î (PostgreSQL).")


# --- –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏ ---

@router.message(Command("topic_id"))
async def topic_id(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç message_thread_id —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏).
    """
    mid = message.message_thread_id
    if message.chat.type not in ("supergroup", "group") or not mid:
        return await message.answer("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä—è–º–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ (—Ç—Ä–µ–¥–µ) —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")
    await message.answer(f"message_thread_id —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã: <code>{mid}</code>", parse_mode="HTML")


@router.message(Command("bind_worktype"))
async def bind_worktype(message: Message):
    """
    –ü—Ä–∏–≤—è–∑–∫–∞ work_type ‚Üí thread_id. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –Ω—É–∂–Ω–æ–π —Ç–µ–º–µ.
    –ü—Ä–∏–º–µ—Ä: /bind_worktype design|montage|shooting
    """
    parts = (message.text or "").split(maxsplit=1)
    if len(parts) < 2 or parts[1] not in {"design", "montage", "shooting"}:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /bind_worktype design|montage|shooting")

    if message.chat.type not in ("supergroup", "group") or not message.message_thread_id:
        return await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤–Ω—É—Ç—Ä–∏ –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")

    work_type = parts[1]
    thread_id = message.message_thread_id
    await repo.upsert_thread_binding(work_type, thread_id)
    await message.answer(f"–ü—Ä–∏–≤—è–∑–∞–ª <b>{work_type}</b> –∫ —Ç–µ–º–µ —Å id=<code>{thread_id}</code>", parse_mode="HTML")


@router.message(Command("show_threads"))
async def show_threads(message: Message):
    items = await repo.list_thread_bindings()
    print(items)
    if not items:
        return await message.answer("–ü—Ä–∏–≤—è–∑–æ–∫ –Ω–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bind_worktype –≤ –Ω—É–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö.")
    lines = [f"{it['work_type']}: <code>{it['thread_id']}</code>" for it in items]
    await message.answer("\n".join(lines), parse_mode="HTML")
