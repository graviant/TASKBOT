from __future__ import annotations
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import default_state
from decimal import Decimal
from datetime import datetime
from typing import Optional
from aiogram.types import CallbackQuery

from ..fsm.task_creation import TaskCreation
from ..filters.validators import IsDecimal
from ..db import repo
from ..services.publisher import publish_assignment
from ..config import load_config
from ..keyboards.reply import user_menu, admin_menu, task_creation_menu
from ..keyboards.inline import worktype_keyboard
from ..keyboards.inline import customers_keyboard  # —Ñ—É–Ω–∫—Ü–∏—è, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∞—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞

router = Router(name="user_tasks")

# --- helpers ---

DATE_FORMATS = ("%Y-%m-%d", "%d.%m.%Y", "%d/%m/%Y")

def _parse_date(s: str) -> Optional[datetime]:
    s = (s or "").strip()
    for fmt in DATE_FORMATS:
        try:
            return datetime.strptime(s, fmt)
        except ValueError:
            continue
    return None

def _main_menu_for(user_id: int):
    cfg = load_config()
    return admin_menu() if user_id in cfg.admins else user_menu()

# --- flow ---

@router.message(~StateFilter(default_state), F.chat.type == "private", F.text == "‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è")
async def cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–æ.", reply_markup=_main_menu_for(message.from_user.id))

@router.message(StateFilter(default_state), F.chat.type == "private", F.text == "üìù –í—ã–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def start_task_creation(message: types.Message, state: FSMContext):
    await state.set_state(TaskCreation.work_type)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=worktype_keyboard())

# === –≤—ã–±–æ—Ä –≤–∏–¥–∞ –∑–∞–¥–∞–Ω–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ ===
@router.callback_query(TaskCreation.work_type, F.data.startswith("worktype:"))
async def select_worktype(callback: CallbackQuery, state: FSMContext):
    value = callback.data.split(":", 1)[1]  # design / montage / shooting
    await state.update_data(work_type=value)
    await state.set_state(TaskCreation.deadline)

    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {value.capitalize()}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫: YYYY-MM-DD, 31.12.2025", reply_markup=task_creation_menu())
    await callback.answer()

@router.message(TaskCreation.deadline, F.text)
async def ask_project(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()
    deadline = _parse_date(text)

    if deadline is None:
        await message.answer(
            "–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É üòï\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: 2025-10-31, 31.10.2025, 31/10/2025.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –µ—â—ë —Ä–∞–∑:",
            reply_markup=task_creation_menu()
        )
        return
    await state.update_data(deadline=deadline)
    await state.set_state(TaskCreation.project)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:", reply_markup=task_creation_menu())


@router.message(TaskCreation.project, F.text)
async def ask_customer(message: types.Message, state: FSMContext):
    await state.update_data(project=message.text.strip())
    await state.set_state(TaskCreation.customer)
    customers = await repo.list_customers()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞:", reply_markup=customers_keyboard(customers))


@router.callback_query(TaskCreation.customer, F.data.startswith("customer:"))
async def select_customer(callback: CallbackQuery, state: FSMContext):
    customer_id = int(callback.data.split(":")[1])
    await state.update_data(customer_id=customer_id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
    await state.set_state(TaskCreation.total_volume)
    name = await repo.get_customer_name(customer_id)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞: {name}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –æ–±—ä—ë–º (—á–∏—Å–ª–æ, –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π):", reply_markup=task_creation_menu())
    await callback.answer()


@router.message(TaskCreation.customer, F.text)
async def ask_volume(message: types.Message, state: FSMContext):
    await state.update_data(customer=message.text.strip())
    await state.set_state(TaskCreation.total_volume)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –æ–±—ä—ë–º (—á–∏—Å–ª–æ, –º–æ–∂–Ω–æ —Å –∑–∞–ø—è—Ç–æ–π):", reply_markup=task_creation_menu())


@router.message(TaskCreation.total_volume, IsDecimal())
async def ask_comment(message: types.Message, state: FSMContext):
    vol = Decimal(message.text.replace(",", "."))
    if vol <= 0:
        await message.answer("–û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:", reply_markup=task_creation_menu())
        return
    await state.update_data(total_volume=vol)
    await state.set_state(TaskCreation.comment)
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ—Ç):", reply_markup=task_creation_menu())


@router.message(TaskCreation.comment, F.text)
async def finalize_task(message: types.Message, state: FSMContext):
    from ..keyboards.inline import customers_keyboard  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤–µ—Ä–Ω—É—Ç—å —à–∞–≥ –≤—ã–±–æ—Ä–∞
    comment = None if message.text.strip() == "-" else message.text.strip()
    data = await state.get_data()
    cfg = load_config()

    # –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—Ç customer_id ‚Äî –≤–µ—Ä–Ω—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —à–∞–≥ –≤—ã–±–æ—Ä–∞
    customer_id = data.get("customer_id")
    if customer_id is None:
        customers = await repo.list_customers()
        await state.set_state(TaskCreation.customer)
        await message.answer("–ü–æ—Ö–æ–∂–µ, –≤—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—á–∏–∫–∞:", reply_markup=customers_keyboard(customers))
        return

    # –∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–∞ –≤ –ë–î —Å–æ—Ö—Ä–∞–Ω—è–µ–º snapshot —á–µ—Ä–µ–∑ INSERT)
    customer_name = await repo.get_customer_name(customer_id)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (–≤—Å—Ç–∞–≤–∫–∞ —Å customer_id –∏ snapshot –≤–Ω—É—Ç—Ä–∏ SQL)
    a_id = await repo.create_assignment(
        author_id=message.from_user.id,
        work_type=data["work_type"],
        deadline_at=data["deadline"],
        project=data["project"],
        customer_id=customer_id,                 # <<< –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º id, –Ω–µ —Å—Ç—Ä–æ–∫—É
        total_volume=data["total_volume"],
        comment=comment
    )

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
    thread_id = cfg.threads_by_worktype.get(data["work_type"])
    chat_id = cfg.general_chat_ids[0]
    deadline_text = data["deadline"].strftime("%Y-%m-%d") if data["deadline"] else "‚Äî"

    me = await message.bot.me()
    msg_chat_id, msg_id = await publish_assignment(
        bot=message.bot,
        chat_id=chat_id,
        thread_id=thread_id,
        assignment_id=a_id,
        work_type=data["work_type"],
        project=data["project"],
        customer=customer_name,                  # <<< –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è
        total_volume=data["total_volume"],
        deadline_text=deadline_text,
        comment=comment,
        deep_prefix=me.username
    )

    await repo.mark_assignment_published(a_id, msg_chat_id, msg_id)

    await state.clear()
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –æ–±—â–µ–º —á–∞—Ç–µ ‚úÖ", reply_markup=_main_menu_for(message.from_user.id))


# --- –ø—Ä–æ—á–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é ‚Äî —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ FSM –ù–ï –∞–∫—Ç–∏–≤–Ω–∞ ---

@router.message(StateFilter(default_state), F.chat.type == "private", F.text == "üì§ –ú–æ–∏ –≤—ã–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
async def my_assignments(message: types.Message):
    items = await repo.my_assignments(message.from_user.id)
    if not items:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return
    lines = [
        f"#{a['id']} {a['work_type']} | –æ–±—ä—ë–º {a['total_volume']} | –∞–∫—Ç–∏–≤–Ω–æ–µ: {'–¥–∞' if a['is_active'] else '–Ω–µ—Ç'}"
        for a in items[:20]
    ]
    await message.answer("\n".join(lines))

@router.message(StateFilter(default_state), F.chat.type == "private", F.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def my_tasks(message: types.Message):
    claims = await repo.my_open_claims(message.from_user.id)
    if not claims:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return
    text = "\n".join([f"#{c['id']}: –ø–æ –∑–∞–¥–∞–Ω–∏—é {c['assignment_id']}, –æ–±—ä—ë–º {c['volume']}" for c in claims])
    await message.answer(text)

@router.message(StateFilter(default_state), F.chat.type == "private", F.text == "üóë –£–¥–∞–ª–∏—Ç—å –º–æ—é –∑–∞–¥–∞—á—É")
async def delete_my_task_hint(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –≤–∞—à–µ–π –Ω–µ–∑–∞–∫—Ä—ã—Ç–æ–π –∑–∞–¥–∞—á–∏ (—á–∏—Å–ª–æ).")

@router.message(StateFilter(default_state), F.chat.type == "private", F.text.regexp(r"^\d+$"))
async def delete_my_task_do(message: types.Message):
    claim_id = int(message.text)
    ok = await repo.delete_my_open_claim(claim_id, message.from_user.id)
    await message.answer("–£–¥–∞–ª–µ–Ω–æ ‚úÖ" if ok else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ / –Ω–µ—Ç –ø—Ä–∞–≤.")
