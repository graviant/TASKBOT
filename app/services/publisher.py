from __future__ import annotations
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from decimal import Decimal

def assignment_markup(assignment_id: int, deep_prefix: str) -> InlineKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∞, —É–≤–æ–¥—è—â–∞—è –≤ –ª–∏—á–∫—É –±–æ—Ç–∞ –ø–æ deep-link –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞–Ω–∏–µ–º.
    """
    url = f"https://t.me/{deep_prefix}?start=assign_{assignment_id}"
    kb = [[InlineKeyboardButton(text="üß© –†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞–Ω–∏–µ–º", url=url)]]
    return InlineKeyboardMarkup(inline_keyboard=kb)

_HUMAN_WORKTYPE = {
    "design":  "–î–∏–∑–∞–π–Ω",
    "montage": "–ú–æ–Ω—Ç–∞–∂",
    "shooting":"–°—ä—ë–º–∫–∞",
}

async def publish_assignment(
    bot: Bot,
    chat_id: int,
    thread_id: int | None,
    assignment_id: int,
    work_type: str,                 # design | montage | shooting | ...
    project: str | None,
    customer: str | None,
    total_volume: Decimal,
    deadline_text: str,             # –æ–∂–∏–¥.: "%d.%m.%Y %H:%M"
    comment: str | None,
    deep_prefix: str,
    author_name: str,               # –ù–û–í–û–ï: "@username" –∏–ª–∏ "–§–ò–û"
    volume_label: str,              # –ù–û–í–û–ï: "–ö–û–õ–ò–ß–ï–°–¢–í–û –ö–ê–†–¢–û–ß–ï–ö/–û–ü–ï–†–ê–¢–û–†–û–í/–†–û–õ–ò–ö–û–í"
):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏ –≤ –æ–±—â–∏–π —á–∞—Ç –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (HTML).
    """

    # –†–∞–∑–¥–µ–ª–∏–º —Å—Ä–æ–∫ –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–æ–∂–∏–¥–∞–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –Ω–∏–º–∏)
    parts = (deadline_text or "").split(" ", 1)
    deadline_date = parts[0] if parts and parts[0] else "‚Äî"
    deadline_time = parts[1] if len(parts) > 1 else "‚Äî"

    worktype_h = _HUMAN_WORKTYPE.get(work_type, work_type.capitalize())

    text_lines = [
        f"üìå–°–û–ó–î–ê–ù–û –ó–ê–î–ê–ù–ò–ï - {assignment_id} !",
        "",
        f"<b>–í–ò–î –†–ê–ë–û–¢–´:</b> {worktype_h}",
        f"<b>–ó–ê–ö–ê–ó–ß–ò–ö:</b> {customer or '‚Äî'}",
        "",
        f"<b>üìÜ–°–†–û–ö –ò–°–ü–û–õ–ù–ï–ù–ò–Ø:</b> {deadline_date}",
        f"<b>‚è∞–í–†–ï–ú–Ø –ò–°–ü–û–õ–ù–ï–ù–ò–Ø:</b> {deadline_time}",
        "",
        f"<b>–ê–í–¢–û–† –ó–ê–î–ê–ù–ò–Ø:</b> {author_name}",
        "",
        f"<b>{volume_label}:</b> {total_volume}",
        "",
        f"<b>–ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê:</b> {project or '‚Äî'}",
    ]

    if comment:
        text_lines.extend(["", f"<b>üìù–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò:</b> {comment}"])

    text = "\n".join(text_lines)
    kb = assignment_markup(assignment_id, deep_prefix)

    # –í main —É–∂–µ —Å—Ç–æ–∏—Ç DefaultBotProperties(parse_mode=HTML), –Ω–æ —è–≤–Ω–æ —É–∫–∞–∂–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    msg = await bot.send_message(
        chat_id,
        text,
        message_thread_id=thread_id,
        reply_markup=kb,
        parse_mode="HTML"
    )
    return msg.chat.id, msg.message_id
